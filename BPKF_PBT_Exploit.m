function[ParamValDep,nadamStr,ModelSpec,KalSpec,PBTstr]=BPKF_PBT_Exploit(PBTcost,ParamValDep,nadamStr,ModelSpec,KalSpec,PBTstr,iBatch)

%% minimum number of data-points to use PB2
minPB2=3;

iRep=ceil(iBatch/PBTstr.SetLength);
PBTstr.Hist.Cost(iRep)=PBTcost;

isPB2=isfield(PBTstr,'PB2')&&~isempty(PBTstr.PB2);
if isPB2
    disp('Doing Population-Based-Bandits')
else
    disp('Doing Population-Based-Training')
end


if ~isfield(PBTstr,'waitMax')
waitMax=10;
else
    waitMax=PBTstr.waitMax;
end
minPass=3; %% Includes self
waitInterval=.25;
tmpDir=PBTstr.Dir;
stillWaiting=true;
wTime=tic;
while stillWaiting
    gg=GetFileNames(tmpDir);
    gg=gg(strncmpi(gg,num2str(iRep),numel(num2str(iRep))));
    stillWaiting= ~or(numel(gg)>minPass,toc(wTime)>waitMax);
    if ~stillWaiting
        pause(waitInterval);
    end
end

gg=GetFileNames(tmpDir);
pause(.5)
if isPB2

gPend=gg(contains(gg,'pending'));
gg=gg(~contains(gg,'pending'));

xPend=[];%zeros(numel(gPend));
tPend=ones(numel(gPend),1);

for ii=1:numel(gPend)
%    try
    tmpName=strsplit(gPend{ii},{'_','.'});
try
   tmp00=load(fullfile(tmpDir,gPend{ii}),'HyperVec');
    tPend(ii)=str2double(tmpName{1});
%    if abs(tmpName{1}-iRep)<=PBTstr.PB2.Trange

   
    xPend(ii,:)=tmp00.HyperVec; %#ok<AGROW> 
catch
    disp('skipping pending file')
end
%    end
end

%% First rep uses actual error, all other reps use delta Error
if iRep==1
    goodPend=tPend==1;
else
goodPend=and(tPend~=1,abs(tPend-iRep)<=PBTstr.PB2.Trange);
end

tPend=tPend(goodPend);
xPend=xPend(goodPend,:);

tInd=zeros(1,numel(gg));

for ii=1:numel(gg)
    tmpName=strsplit(gg{ii},{'_','.'});
    tInd(ii)=str2double(tmpName{1});
end

%% First rep uses actual error, all other reps use difference in error
if iRep==1
    goodTime=tInd==1;
else
goodTime=and(tInd~=1,abs(tInd-iRep)<=PBTstr.PB2.Trange);
end

tInd=tInd(goodTime);
gg=gg(goodTime);
else
    %% Regular PBT: Only for same iteration
gg=gg(strncmpi(gg,num2str(iRep),numel(num2str(iRep))));
gg=gg(~contains(gg,'pending'));
end


%% format:   [file #,  rep,  cost,  workerInd]
xAll=[];
yAll=zeros(numel(gg),1);
gStore=[(1:numel(gg))' zeros(numel(gg),3)];
for ii=1:numel(gg)
    tmpName=strsplit(gg{ii},{'_','.'});
    if isPB2
    tmp00=load(fullfile(tmpDir,gg{ii}),'HyperVec','PB2err');
    xAll(ii,:)=tmp00.HyperVec; %#ok<AGROW> 
    yAll(ii)=tmp00.PB2err;
    end
    for jj=1:3
        gStore(ii,jj+1)=str2double(tmpName{jj});
    end
end

if ~isPB2
gStore(gStore(:,2)~=iRep,:)=[];
end

if isnan(PBTstr.Thresh)
    doesPass=true;
else
%% [worst-thresh,  best-thresh]
passBounds=quantile(gStore(:,3)',[1-PBTstr.Thresh,PBTstr.Thresh]);

doesPass=(1+numel(gStore))<ceil(1/PBTstr.Thresh)||PBTcost<passBounds(1);
end

PBTstr.Hist.workerCopy(:,iRep)=[PBTstr.Worker;PBTcost];
if ~doesPass
   passSet=gStore(gStore(:,3)<=passBounds(2),:);
   swapInd=randi(size(passSet,1));
  % load(fullfile(tmpName,gg{passSet(swapInd,1)}),'nadamStr','ModelSpec','KalSpec')
   tmp=load(fullfile(tmpDir,gg{passSet(swapInd,1)}));
   PBTstr.Hist.workerCopy(:,iRep)=passSet(swapInd,[4 3]);
   %% Doesn't overwrite histories recorded in ParamValDep
   ParamValDep.DepStr=tmp.ParamValDep.DepStr;
   ParamValDep.ParamStr=tmp.ParamValDep.ParamStr;
   ParamValDep.Reg=tmp.ParamValDep.Reg;
   if ~isPB2
   if numel(PBTstr.pertFactor)==1
       hyperPert=1+[-1 1]*PBTstr.pertFactor;
   else
       hyperPert=PBTstr.pertFactor;
   end
   end
else
    hyperPert=[1 1];
end

PBTstr.Hist.postCost(iRep)=PBTcost;
if isPB2
    if size(xAll,1)>=minPB2
    GPReligible=sum(abs(tInd-iRep)<=PBTstr.PB2.tGPR);
    doMultiLength=GPReligible>(3*size(xAll,2));
    if isfield(PBTstr,'LogMark')
    xAll(:,PBTstr.LogMark)=log(xAll(:,PBTstr.LogMark));
    if ~isempty(xPend)
    xPend(:,PBTstr.LogMark)=log(xPend(:,PBTstr.LogMark));
    end
    end
    [HyperVec,predE]=BPKF_PB2_GP(xAll,yAll,tInd,xPend,tPend,PBTstr.PB2.Eps,PBTstr.PB2.alph,PBTstr.lB,PBTstr.uB,iRep,PBTstr.PB2.tGPR,doMultiLength);

    if isfield(PBTstr,'LogMark')
    HyperVec(PBTstr.LogMark)=exp(HyperVec(PBTstr.LogMark));
    end
    PBTstr.Hist.PB2pred(iRep)=predE;
    PBTstr.Hist.postHyper(:,iRep)=HyperVec;
    %% Create "pending" file-marker
    fName=fullfile(PBTstr.Dir,strcat(num2str(iRep),'_pending_',num2str(PBTstr.Worker),'.mat'));
    save(fName,'HyperVec')
    PBTstr.pendingFile=fName;

    %% Integrate HyperVec into the structures
    nEach=cellfun(@sum,PBTstr.HyperInds);
    tmpCum=cumsum(nEach);
    hyperSplit=cell(1,numel(nEach));
    if nEach(1)~=0
    hyperSplit{1}=HyperVec(1:nEach(1));
    end
    for iP=2:numel(nEach)
        hyperSplit{iP}=HyperVec(tmpCum(iP-1)+(1:nEach(iP)));
    end
%   if ~tmp_notUsed(PBTstr.Var,'Grad')
%   [nadamStr,PBTstr.Hist.Grad(:,iRep)]=BPKF_PBT_Explore(nadamStr,PBTstr.Var.Grad,hyperPert);

   tmp_notUsed=@(xx,yy)(~isfield(xx,yy)||isempty(xx.(yy)));


   if ~tmp_notUsed(PBTstr.Var,'Grad')
   nadamStr=BPKF_PBT_Devectorize(hyperSplit{1},nadamStr,PBTstr.Var.Grad);
   end
   if ~tmp_notUsed(PBTstr.Var,'Param')
   ParamValDep=BPKF_PBT_Devectorize(hyperSplit{2},ParamValDep,PBTstr.Var.Param);
   end
   if ~tmp_notUsed(PBTstr.Var,'Kal')
   KalSpec=BPKF_PBT_Devectorize(hyperSplit{3},KalSpec,PBTstr.Var.Kal);
   end
   if ~tmp_notUsed(PBTstr.Var,'Model')
   ModelSpec=BPKF_PBT_Devectorize(hyperSplit{4},ModelSpec,PBTstr.Var.Model);
   end
    end
else
   %% Scaling perturbations for PBT
   tmp_notUsed=@(xx,yy)(~isfield(xx,yy)||isempty(xx.(yy)));
   if ~tmp_notUsed(PBTstr.Var,'Grad')
   [nadamStr,PBTstr.Hist.Grad(:,iRep)]=BPKF_PBT_Explore(nadamStr,PBTstr.Var.Grad,hyperPert);
   nadamStr.Spec.dec1=min(max(.8,nadamStr.Spec.dec1),.98);
   nadamStr.Spec.dec2=min(max(.8,nadamStr.Spec.dec2),.98);
   nadamStr.Spec.Rate=max(0.0001,nadamStr.Spec.Rate);
   end
   if ~tmp_notUsed(PBTstr.Var,'Param')
   [ParamValDep,PBTstr.Hist.Param(:,iRep)]=BPKF_PBT_Explore(ParamValDep,PBTstr.Var.Param,hyperPert);
   end
   if ~tmp_notUsed(PBTstr.Var,'Kal')
   [KalSpec,PBTstr.Hist.kal(:,iRep)]=BPKF_PBT_Explore(KalSpec,PBTstr.Var.Kal,iRep,hyperPert);
   end
   if ~tmp_notUsed(PBTstr.Var,'Model')
   [ModelSpec,PBTstr.Hist.Model(:,iRep)]=BPKF_PBT_Explore(ModelSpec,PBTstr.Var.Model,hyperPert);
   end
end