function[Out]=BPKF_PB2_Exploit(PBTcost,ParamValDep,nadamStr,ModelSpec,KalSpec,PBTstr,iBatch)
iRep=ceil(iBatch/PBTstr.SetLength);
PBTstr.Hist.Cost(iRep)=PBTcost;
if ~isfield(PBTstr,'waitMax')
waitMax=10;
else
    waitMax=PBTstr.waitMax;
end
minPass=3; %% Includes self
waitInterval=.25;
tmpDir=PBTstr.Dir;
stillWaiting=true;
wTime=tic;
while stillWaiting
    gg=GetFileNames(tmpDir);
    gg=gg(strncmpi(gg,num2str(iRep),numel(num2str(iRep))));
    stillWaiting= ~or(numel(gg)>minPass,toc(wTime)>waitMax);
    if ~stillWaiting
        pause(waitInterval);
    end
end
gg=GetFileNames(tmpDir);

gPend=gg(contains(gg,'pending'));
gg=gg(~contains(gg,'pending'));

xPend=[];%zeros(nPB,numel(gPend));
for ii=1:numel(gPend)
%    try
    tmpName=strsplit(gPend{ii},{'_','.'});
    if abs(tmpName{1}-iRep)<=PBTstr.PB2.Trange
    mm=load(fullfile(tmpDir,gPend{ii}),'HyperVec');
    xPend=[xPend;mm]; %#ok<AGROW> 
    end
end


%% format:   [file #,  rep,  cost,  workerInd]
gStore=[(1:numel(gg))' zeros(numel(gg),3)];

tInd=zeros(1,numel(gg));

xAll=[];

for ii=1:numel(gg)
    tmpName=strsplit(gg{ii},{'_','.'});
    tInd(ii)=str2double(tmpName{1});
end
gg(abs(tInd-iRep)>PBTstr.PB2.Trange)=[];



%% format:   [file #,  rep,  cost,  workerInd]
gStore=[(1:numel(gg))' zeros(numel(gg),3)];

for ii=1:numel(gg)
    mm=load(fullfile(tmpDir,gPend{ii}),'HyperVec');
    xAll(ii,:)=mm; %#ok<AGROW> 

    tmpName=strsplit(gg{ii},{'_','.'});
    for jj=1:3
        gStore(ii,jj+1)=str2double(tmpName{jj});
    end
end
gStore(gStore(:,2)~=iRep,:)=[];

if isnan(PBTstr.Thresh)
    doesPass=true;
else
%% [worst-thresh,  best-thresh]
passBounds=quantile(gStore(:,3)',[1-PBTstr.Thresh,PBTstr.Thresh]);
doesPass=(1+numel(gStore))<ceil(1/PBTstr.Thresh)||PBTcost<passBounds(1);
end

PBTstr.Hist.workerCopy(:,iRep)=[PBTstr.Worker;PBTcost];

if ~doesPass
   passSet=gStore(gStore(:,3)<=passBounds(2),:);
   swapInd=randi(size(passSet,1));
  % load(fullfile(tmpName,gg{passSet(swapInd,1)}),'nadamStr','ModelSpec','KalSpec')
   tmp=load(fullfile(tmpDir,gg{passSet(swapInd,1)}));
   %% Post-cost is the cost of the new (sampled) parameterization
   PBTstr.Hist.postCost(iRep)=tmp.PBTstr0.Hist.Cost(iRep);
   PBTstr.Hist.workerCopy(:,iRep)=passSet(swapInd,[3 4]);
   %% Doesn't overwrite histories recorded in ParamValDep
   ParamValDep.DepStr=tmp.ParamValDep.DepStr;
   ParamValDep.ParamStr=tmp.ParamValDep.ParamStr;
   ParamValDep.Reg=tmp.ParamValDep.Reg;
end







