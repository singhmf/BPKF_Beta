function[ParamValDep,nadamStr,ModelSpec,KalSpec,PBTstr]=BPKF_PBT_Exploit(PBTcost,ParamValDep,nadamStr,ModelSpec,KalSpec,PBTstr,iBatch)
iRep=ceil(iBatch/PBTstr.SetLength);
PBTstr.Hist.Cost(iRep)=PBTcost;
if ~isfield(PBTstr,'waitMax')
waitMax=10;
else
    waitMax=PBTstr.waitMax;
end
minPass=3; %% Includes self
waitInterval=.25;
tmpDir=PBTstr.Dir;
stillWaiting=true;
wTime=tic;
while stillWaiting
    gg=GetFileNames(tmpDir);
    gg=gg(strncmpi(gg,num2str(iRep),numel(num2str(iRep))));
    stillWaiting= ~or(numel(gg)>minPass,toc(wTime)>waitMax);
    if ~stillWaiting
        pause(waitInterval);
    end
end

gg=GetFileNames(tmpDir);
gg=gg(strncmpi(gg,num2str(iRep),numel(num2str(iRep))));

%% format:   [file #,  rep,  cost,  workerInd]
gStore=[(1:numel(gg))' zeros(numel(gg),3)];
for ii=1:numel(gg)
    tmpName=strsplit(gg{ii},{'_','.'});
    for jj=1:3
        gStore(ii,jj+1)=str2double(tmpName{jj});
    end
end
gStore(gStore(:,2)~=iRep,:)=[];

if isnan(PBTstr.Thresh)
    doesPass=true;
else
%% [worst-thresh,  best-thresh]
passBounds=quantile(gStore(:,3)',[1-PBTstr.Thresh,PBTstr.Thresh]);

doesPass=(1+numel(gStore))<ceil(1/PBTstr.Thresh)||PBTcost<passBounds(1);
end

PBTstr.Hist.workerCopy(:,iRep)=[PBTstr.Worker;PBTcost];
if ~doesPass
   passSet=gStore(gStore(:,3)<=passBounds(2),:);
   swapInd=randi(size(passSet,1));
  % load(fullfile(tmpName,gg{passSet(swapInd,1)}),'nadamStr','ModelSpec','KalSpec')
   tmp=load(fullfile(tmpDir,gg{passSet(swapInd,1)}));
   PBTstr.Hist.workerCopy(:,iRep)=passSet(swapInd,[3 4]);
   %% Doesn't overwrite histories recorded in ParamValDep
   ParamValDep.DepStr=tmp.ParamValDep.DepStr;
   ParamValDep.ParamStr=tmp.ParamValDep.ParamStr;
   ParamValDep.Reg=tmp.ParamValDep.Reg;

   if numel(PBTstr.pertFactor)==1
       hyperPert=1+[-1 1]*PBTstr.pertFactor;
   else
       hyperPert=PBTstr.pertFactor;
   end
end
if doesPass
    hyperPert=[1 1];
end

   tmp_notUsed=@(xx,yy)(~isfield(xx,yy)||isempty(xx.(yy)));
   if ~tmp_notUsed(PBTstr.Var,'Grad')
   [nadamStr,PBTstr.Hist.Grad(:,iRep)]=BPKF_PBT_Explore(nadamStr,PBTstr.Var.Grad,hyperPert);
   nadamStr.Spec.dec1=min(max(.8,nadamStr.Spec.dec1),.98);
   nadamStr.Spec.dec2=min(max(.8,nadamStr.Spec.dec2),.98);
   nadamStr.Spec.Rate=max(0.0001,nadamStr.Spec.Rate);
   end
   if ~tmp_notUsed(PBTstr.Var,'Param')
   [ParamValDep,PBTstr.Hist.Param(:,iRep)]=BPKF_PBT_Explore(ParamValDep,PBTstr.Var.Param,hyperPert);
   end
   if ~tmp_notUsed(PBTstr.Var,'kal')
   [KalSpec,PBTstr.Hist.kal(:,iRep)]=BPKF_PBT_Explore(KalSpec,PBTstr.Var.Kal,iRep,hyperPert);
   end
   if ~tmp_notUsed(PBTstr.Var,'Model')
   [ModelSpec,PBTstr.Hist.Model(:,iRep)]=BPKF_PBT_Explore(ModelSpec,PBTstr.Var.Model,hyperPert);
   end
end